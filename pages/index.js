import React, { useState, useCallback, useEffect } from 'react';
import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import useDebounce from '../hooks/useDebounce'


async function getRecipes(search) {
  if (search) {
    const res = await fetch(`http://localhost:8000/api/v1/recipes/?search=${encodeURIComponent(search)}`)
    return res.json()
  }
}

const Ingredient = ({key, r}) => {
  return(<li className={styles.description} key={key}>{r}</li>)
}

const Recipe = ({key, r}) => {
  return(<li className={styles.description} key={key}>{r.name}</li>)
}

function Home({initial_recipes, ingredients}) {
  
  const [search, setSearch] = useState('');
  const [recipes, setRecipes] = useState([]);
  const [isIngredientSelected, setIngredientSelecetion] = useState(false);
  const debouncedSearch = useDebounce(search, 400);


  
  useEffect(() => {
    if (search) {
      getRecipes(search).then(r => {
        console.log('THEN')
        console.log(r)
        setRecipes(r)
      })
    }

  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [debouncedSearch]);

  const handleIngredientChange = ({target: {value}}) => {
    setIngredientSelecetion(value)
  }

  const resetSearch = () => {
    setSearch('')
    setIngredientSelecetion('')
    document.querySelector('#selectIngredient').value = '';
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Recipes</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Recipes:
        </h1>

        <div className="wrap">
          <div className="search">
              <input id="search" className="searchTerm" type="text" placeholder="Search..." value={search} onChange={(e) => setSearch(e.target.value)} autoFocus required/>
          </div>
        </div>
      
          <div style={{marginBottom:'16px'}}>
            <label htmlFor="selectIngredient">Select an ingredient: </label>
            <select id="selectIngredient"  onChange={handleIngredientChange}>
              <option defaultValue="" value="">Ingredients</option>
              {ingredients.map((i, k) => <option key={k} value={k}>{i.name}</option>)}
            </select>
          </div>
          <br />

          <button onClick={resetSearch}>Reset search</button>

        {isIngredientSelected != "" ? 
          <ul> { ingredients[isIngredientSelected]['recipes'].map((r, k) => <Ingredient r={r} key={k}/>) } </ul> : 
          search ? 
          <ul> {recipes.map( (r, k) => <Recipe r={r} key={k}/>)} </ul> : 
          <ul> {initial_recipes.map( (r, k) =><Recipe r={r} key={k}/>)} </ul> 
        }

      </main>

    </div>
  )
}

export async function getStaticProps(context) {
  const rescipesResponse = await fetch(`http://localhost:8000/api/v1/recipes`)
  const ingredientsResponse = await fetch(`http://localhost:8000/api/v1/ingredients`)
  
  const recipes = await rescipesResponse.json()
  const ingredients = await ingredientsResponse.json()
  

  return {
    props: { initial_recipes: recipes, ingredients }, // will be passed to the page component as props
  }
}


export default Home